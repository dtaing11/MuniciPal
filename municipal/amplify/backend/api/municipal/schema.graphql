# The Issue model tracks reports from citizens, including their geo-location, optional description, optional images, and upvotes.
type Issue @model
  @auth(rules: [
    { allow: groups, groups: ["Citizen"], operations: [create, read, update] },
    { allow: groups, groups: ["Contractor`", "Government"], operations: [read, update, delete] },
    { allow: public, provider: apiKey, operations: [create, read, update] }
  ]) {
  id: ID! @primaryKey
  citizenId: ID!                       # ID of the citizen who created the issue
  description: String!                 # Description of the issue
  imageUrls: [String]                  # Optional URL of the image uploaded
  category: IssueCategory              # Category of the issue (e.g., Pothole, Street Light, etc.)
  latitude: Float!                     # Geo-location: latitude
  longitude: Float!                    # Geo-location: longitude
  geoHash: String! @index(name: "byGeoHashCategory", queryField: "issuesByGeoHashCategory", sortKeyFields: ["category"])
  status: IssueStatus!                 # Status of the issue (OPEN, IN_PROGRESS, CLOSED)
  progress: String                     # Progress update field, viewable by citizens
  upvotes: Int!                        # Number of upvotes the issue has received
  reports: [Report] @hasMany(indexName: "byIssue", fields: ["id"]) # Reports associated with the issue
}

# Enumeration to define the status of an issue
enum IssueStatus {
  OPEN
  IN_PROGRESS
  CLOSED
}

enum IssueCategory {
  Pothole
  StreetLight
  WaterLeak
  TrafficSignal
  Roadway
  Sidewalk
  Drainage
  TreeMaintenance
  Graffiti
  ParkMaintenance
  StreetSign
  PedestrianCrossing 
  Other
}

type Report @model
  @auth(rules: [
    { allow: groups, groups: ["Citizen"], operations: [create, read] },
    { allow: groups, groups: ["Government", "Contractor"], operations: [read, update, delete] },
    { allow: public, provider: apiKey, operations: [create, read, update] }
  ]) {
  id: ID! @primaryKey
  citizenId: ID!
  citizenName: String!
  issueId: ID! @index(name: "byIssue", queryField: "reportsByIssueId")
  category: IssueCategory!
  latitude: Float!
  longitude: Float!
  geoHash: String! @index(name: "byIssueGeoHash", queryField: "reportsByIssueGeoHash", sortKeyFields: ["id"])
  description: String
  imageUrl: String
}

# Citizens can upvote issues. Each upvote is tied to a specific citizen and issue, and a citizen can only upvote once per issue.
type Upvote @model
  @auth(rules: [
    { allow: owner, ownerField: "citizenId", operations: [create, read, delete] },
    { allow: groups, groups: ["Government"], operations: [read] }
  ]) {
  id: ID!
  citizenId: ID! @index(name: "byCitizen", queryField: "upvotesByCitizen")  # ID of the citizen who upvoted the issue
  issueId: ID! @index(name: "byIssue", queryField: "upvotesByIssue") # ID of the issue being upvoted
}

# Public works contract object, with limited information viewable by citizens
type Contract @model
  @auth(rules: [
    { allow: groups, groups: ["Government"], operations: [create, read, update, delete] },
    { allow: groups, groups: ["Contractor"], operations: [read] },
    { allow: groups, groups: ["Citizen"], operations: [read]}  # Citizens can view awarded contracts
  ]) {
  id: ID!
  title: String!                       # Title of the contract
  description: String                  # Description of the contract
  pdfUrl: String!                      # URL to the PDF version of the contract stored in S3
  startDate: AWSDate!                  # Contract start date
  endDate: AWSDate                     # Contract end date
  governmentId: ID! @index(name: "byGovernment") # Reference to the government entity responsible for this contract
  contractorId: ID!                    # Reference to the contractor awarded the contract
  finalCost: Float                     # Total cost of the contract (exposed after award)
  status: ContractStatus!              # Status of the contract (AWARDED, IN_PROGRESS, COMPLETED)
}

# Enumeration to define the status of a contract
enum ContractStatus {
  DRAFT
  AWARDED
  IN_PROGRESS
  COMPLETED
}

# Request for Proposal (RFP) object representing a proposal request for public works
type RequestForProposal @model
  @auth(rules: [
    { allow: groups, groups: ["Government"], operations: [create, read, update, delete] },
    { allow: groups, groups: ["Contractor"], operations: [read, create] },
    { allow: groups, groups: ["Citizen"], operations: [read]}  # Citizens can view RFPs
  ]) {
  id: ID!
  title: String!                       # Title of the RFP
  description: String                  # Description of the project/request
  pdfUrl: String!                      # URL to the PDF version of the RFP stored in S3
  deadline: AWSDateTime!               # Deadline for submitting proposals
  status: RFPStatus!                   # Status of the RFP (OPEN, CLOSED, AWARDED)
  governmentId: ID! @index(name: "byGovernment") # Reference to the government entity issuing the RFP
  contractId: ID                       # Reference to the contract (if an RFP turns into a contract)
  bids: [Bid]  @hasMany(indexName: "byRFP", fields: ["id"]) # Bids submitted for the RFP
  categories: [IssueCategory]!           # Categories of the RFP
}

# Enumeration to define the status of an RFP
enum RFPStatus {
  OPEN
  CLOSED
  AWARDED
}

# Bids are private during the bidding process. Only government can access all bids, while contractors can only see their own bids.
type Bid @model
  @auth(rules: [
    { allow: groups, groups: ["Government"], operations: [create, read, update, delete] },  # Only government can read and manage bids
    { allow: groups, groups: ["Contractor"], operations: [create, read] }  # Contractors can only read their own bids
  ]) {
  id: ID! 
  contractorId: ID!                    # ID of the contractor submitting the bid
  rfpId: ID! @index(name: "byRFP")            # RFP this bid is associated with
  bidAmount: Float                     # Bid amount (private)
  pdfUrl: String!                      # URL to the PDF version of the bid stored in S3
  status: BidStatus!                   # Status of the bid (PENDING, ACCEPTED, REJECTED)
}

# Enumeration for status of the bid (private during the bidding phase)
enum BidStatus {
  DRAFT
  SUBMITTED
  ACCEPTED
  REJECTED
}

# Government entity, responsible for issuing RFPs and managing contracts
type GovernmentEntity @model
  @auth(rules: [
    { allow: groups, groups: ["Government"], operations: [create, read, update, delete] }
  ]) {
  id: ID!
  name: String!                        # Name of the government entity (e.g., city, department)
  address: String!                     # Physical address of the entity
  rfpList: [RequestForProposal] @hasMany(indexName: "byGovernment", fields: ["id"]) # RFPs issued by this entity
  contractList: [Contract] @hasMany(indexName: "byGovernment", fields: ["id"]) # Contracts managed by this entity
}

type ContractorSubscription @model
  @auth(rules: [
    { allow: owner, ownerField: "contractorId", operations: [create, read, update, delete] }
  ]) {
  id: ID!
  contractorId: ID!                    # ID of the contractor subscribing to categories
  categories: [IssueCategory]!           # List of categories the contractor is subscribing to
}

input HandleReportInput {
  citizenId: ID!
  citizenName: String!
  category: IssueCategory!
  latitude: Float!
  longitude: Float!
  geoHash: String!
  description: String
  imageUrl: String
}

type Mutation {
  handleReport(input: HandleReportInput!): String @function(name: "IssueReportHandler-${env}")
}